import torch
from PIL import Image
import requests
from transformers import AutoImageProcessor, AutoModelForImageClassification
import warnings

# –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è, —è–∫—ñ –Ω–µ –≤–ø–ª–∏–≤–∞—é—Ç—å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
warnings.filterwarnings("ignore")

# --- 1. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
print("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ —Ç–∞ –ø—Ä–æ—Ü–µ—Å–æ—Ä–∞...")

model_name = "dima806/deepfake_vs_real_image_detection"

try:
    processor = AutoImageProcessor.from_pretrained(model_name)
    model = AutoModelForImageClassification.from_pretrained(model_name)
except Exception as e:
    print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–æ–¥–µ–ª—å: {e}")
    exit()

labels = model.config.id2label
print(f"–ú–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞. –ö–ª–∞—Å–∏: {labels}")


# --- 2. –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É ---

def detect_deepfake(image_url):
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ URL, –æ–±—Ä–æ–±–ª—è—î –π–æ–≥–æ
    —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª—ñ.
    """
    try:
        # -------------------------------------------------------------------
        # –û–ù–û–í–õ–ï–ù–û: –î–æ–¥–∞—î–º–æ User-Agent, —â–æ–± —ñ–º—ñ—Ç—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç –±—Ä–∞—É–∑–µ—Ä–∞
        # -------------------------------------------------------------------
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }

        print(f"–û–±—Ä–æ–±–∫–∞: {image_url[:50]}...")
        # –ü–µ—Ä–µ–¥–∞—î–º–æ 'headers' —É –∑–∞–ø–∏—Ç
        response = requests.get(image_url, stream=True, headers=headers)

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —É—Å–ø—ñ—à–Ω–∏–π –∑–∞–ø–∏—Ç
        if response.status_code != 200:
            return f"–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ (–ö–æ–¥: {response.status_code})", 0

        # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        image = Image.open(response.raw).convert("RGB")

        # –û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –º–æ–¥–µ–ª—ñ
        inputs = processor(images=image, return_tensors="pt")

        # –í–∏–º–∫–Ω–µ–Ω–Ω—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≥—Ä–∞–¥—ñ—î–Ω—Ç—ñ–≤ –¥–ª—è –ø—Ä–∏—à–≤–∏–¥—à–µ–Ω–Ω—è
        with torch.no_grad():
            outputs = model(**inputs)

        logits = outputs.logits
        predicted_class_idx = logits.argmax(-1).item()
        probability = torch.nn.functional.softmax(logits, dim=1)[0][predicted_class_idx].item()

        return labels[predicted_class_idx], probability

    except Exception as e:
        # –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –≤—Å–µ –æ–¥–Ω–æ –≤–∏–Ω–∏–∫–∞—î, –≤–∏–≤–æ–¥–∏–º–æ —ó—ó
        return f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}", 0


# --- 3. –ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—è —Ç–µ—Å—Ç—É ---

print("\n--- –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è ---")

# –ó—Ä–∞–∑–æ–∫ 1: –°–ø—Ä–∞–≤–∂–Ω—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
real_image_url = "https://upload.wikimedia.org/wikipedia/commons/thumb/a/a3/Audrey_Hepburn_in_Breakfast_at_Tiffany%27s_1.jpg/800px-Audrey_Hepburn_in_Breakfast_at_Tiffany%27s_1.jpg"

print(f"\nüîç –ê–Ω–∞–ª—ñ–∑ –ó—Ä–∞–∑–∫–∞ 1 (–°–ø—Ä–∞–≤–∂–Ω—î —Ñ–æ—Ç–æ):")
result_real, prob_real = detect_deepfake(real_image_url)
print(f"‚û°Ô∏è –í–µ—Ä–¥–∏–∫—Ç –º–æ–¥–µ–ª—ñ: {result_real} (–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å: {prob_real * 100:.2f}%)")

# –ó—Ä–∞–∑–æ–∫ 2: –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–µ (—Ñ–µ–π–∫–æ–≤–µ) –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
fake_image_url = "https://this-person-does-not-exist.com/img/avatar-gen112b0785c4906f360f0e30931d8c1c51.jpg"

print(f"\nüîç –ê–Ω–∞–ª—ñ–∑ –ó—Ä–∞–∑–∫–∞ 2 (–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–µ —Ñ–æ—Ç–æ):")
result_fake, prob_fake = detect_deepfake(fake_image_url)
print(f"‚û°Ô∏è –í–µ—Ä–¥–∏–∫—Ç –º–æ–¥–µ–ª—ñ: {result_fake} (–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å: {prob_fake * 100:.2f}%)")

print("\n--- –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ ---")